step-1
-------------
Install python
https://code.visualstudio.com/docs/setup/windows
-------------------------------------------------------------------------------
create virtual environment

python -m venv venv
------------------------------------------------------------------------------------
Then activate that environment

venv\Scripts\activate
-------------------------------------------------------------------------------------------
Then install Django in that environment

pip install django
------------------------------------------------------------------------------------------
Then create django project named mysite

django-admin startproject mysite
cd mysite
----------------------------------------------------------------------------------------
to run
(venv) C:\Users\91977\Desktop\infosysdjango\mysite>python manage.py runserver 127.0.0.1:8090
-------------------------------------------------------------------------------------------
mysite
	mysite
	__init__.py
	settings.py
	urls.py
	wsgi.py
	asgi.py
manage.py
-----------------------------------------------------------------------------
on the browser type-->127.0.0.1:8090
-----------------------OR------------------------------------
localhost:8090
-----------------------------17th April 2024-----------------------------------------
to create an application
py manage.py startapp testapp
----------------------------------------------------------------------
mysite
	mysite
		__init__.py
		settings.py
		urls.py
		wsgi.py
		asgi.py
	testapp
		migrations(database)
		__init__.py
		views.py
		models.py
		admin.py
		apps.py
		tests.py
manage.py
-----------------------------------------------------------------------------------
Example 1:-
testapp.view.py
----------------------
from django.http import HttpResponse

# Create your views here.
def welcome(request):
    return HttpResponse('<center><h1>Welcome to Django Project</h1></center><hr>')
------------------------------------------------------------------------------------------------------------------------------
mysite.urls.py
-------------------------------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('welcome/',views.welcome),
]
------------------------------------------------------------------------------------------------------------------------------------
mysite.settings.py
-------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'testapp'
]
-------------------------------------------------------------------------------------------------------------------------------------
Example-2
--------------------------
from django.http import HttpResponse
import datetime

# Create your views here.
def welcome(request):
    date=datetime.datetime.now()
    s='<h1>The current date and time is :'+str(date)+'</h1>'
    return HttpResponse(s)
--------------------------------------------------------------------------------------------------------------------------------
multiple functions
-------------------------------
Example-3
--------------------------
to create an application
py manage.py startapp testapp
----------------------------------------------------------
testapp.view.py
----------------------------------------------------------
from django.shortcuts import render
from django.http import HttpResponse
import datetime

# Create your views here.
def welcome(request):
    return HttpResponse('<center><h1>Welcome to Django Project</h1></center><hr>')


def date_display(request):
    date=datetime.datetime.now()
    s='<h1>The current date and time is :'+str(date)+'</h1>'
    return HttpResponse(s)

-------------------------------------------------------------------------------------------------
mysite.urls.py
-----------------------------------------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('welcome/',views.welcome),
    path('date/',views.date_display),
        
]
-----------------------------------------------------------------------------------
mysite.settings.py
-------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'testapp'
]
---------------------------------------------------------------------------------------------
Example-4
--------------------------
to create an application
py manage.py startapp testapp
py manage.py startapp timeapp
py manage.py startapp greetingapp

3 application created
---------------------------------------------------
mysite.settings.py
-------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'testapp',
     'greetingapp',
     'timeapp'
]
---------------------------------------------------------------------------------------
mysite.urls.py
--------------------------------------------------------------------------------------------
from greetingapp.views import greetings_view  <----function name
from timeapp.views import time_info

urlpatterns = [
    path('admin/', admin.site.urls),
    path('welcome/',welcome),
    path('greeting/',greetings_view),<------function name
    path('time/',time_info),
]
---------------------------------------------OR-----------------------------------------------
---------------------------------------------------------------------------------------
mysite.urls.py
--------------------------------------------------------------------------------------------
from greetingapp import views as v1 
from timeapp import views as v2

urlpatterns = [
    path('admin/', admin.site.urls),
    path('welcome/',welcome),
    path('greeting/',v1.greetings_view),
    path('time/',v2.time_info),
]
-----------------------------------------------------------------------------------------------------------
example-5
------------------------
1)create folder templates inside your application (testapp)
2)create a html file inside it.(index.html)
------------
<html>
<center><h1>Welcome to Django</h1></center><hr>
<table>
<tr><td>Enter your name</td><td><input type=text name=t1 size=20></td></tr>
<tr><td>Enter your email</td><td><input type=text name=t2 size=20></td></tr>
<tr><td>Enter your address</td><td><input type=text name=t3 size=20></td></tr>
<tr><td>Enter your phoneno</td><td><input type=text name=t3 size=20></td></tr>
<tr><td></td><td><input type=Button value="submit"></td></tr>
</table>
</html>
-------------------------------------------------------------------
views.py
-----------------
def index(request):
    return render(request,'index.html')
------------------------------------------------------------------
urls.py
--------------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
     path('first/',views.welcome),
     path('second/',views.geetings),
      path('index/',views.index),
]
-------------------------------------------22nd April 2024-----------------------------------
python -m venv venv
venv\Scripts\activate
pip install django
django-admin startproject mysite
cd mysite
py manage.py startapp testapp
python manage.py runserver 127.0.0.1:8090
---------------------------------------------------------------------------------------
example-6
-----------------------
 models.py
------------------------
How to create a model
----------------------------------
from django.db import models


class Employees(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    Dept_name = models.CharField(max_length=20)
    joining_date = models.DateField()
    salary = models.IntegerField()
---------------------------------------------------------------------------------------------------
Now, this Employees model will automatically create a table equivalent to this.

CREATE TABLE "testapp_employees" (
   "id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, 
   "first_name" varchar(30) NOT NULL, 
   "last_name" varchar(30) NOT NULL, 
   "Dept_name" varchar(20) NOT NULL, 
   "joining_date" date NOT NULL, 
   "salary" integer NOT NULL
);
COMMIT;
-------------------------------------------------------------------------------------------------------------------------------
In the example, we are creating a model in the “myApp” application. So, Django will automatically generate a table name “myApp_employees” by using model metadata.

Additionally, an id field will also be added to the table. This id is a NOT NULL, AUTOINCREMENT, PRIMARY KEY field.
-----------------------------------------------------------------------------------------------
Make Migration in Django
After successfully creating a model class.

First, we need to tell the Django server that we want to use a model. For this, first, we need to use the settings.py file of the Django project ‘myProject’. So, open the settings.py file and give the name of your app having a model in the INSTALLED_APPS section.

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'testapp',
]

--------------------------------------------------------------------------------------
Next, we need to run the migrations so the table can be created. Django uses migrations to propagate changes to your models (adding a field, deleting a model, etc.) to your database schema.

First, run the makemigrations command 

python manage.py makemigrations
---------------------------------------------------------------------------------------------------
This command helps to create migrations based on the changes detected in our models. After this, we need to run a migrate command

python manage.py migrate
---------------------------------------------------------------------------------------------------------------------
Django uses the model class to represent database tables and objects as a record in the table. 

 we will be using a Python shell, and to open the shell, we have run the following command in our project directory.

python manage.py shell
---------------------------------------------------------------------------
we can import the “Employees” model from our testapp application.

from testapp.models import Employees
-------------------------------------------------------------------
Now to create an object, we have to pass the values of the fields as an argument to the model class. A simple example of the Employees model is given below.

emp = Employees(first_name='Madhu', last_name='kumar', Dept_name='Technical', joining_date='2020-08-23', salary=25000)

In the example, we have created an object named “emp” and it is used to store 5 fields in the Employees table. Next, to store this record in the table, we have to use the save() method. In Django, the save() method is used to implement the SQL insert. Here is how we should use the save() method.

emp.save()
----------------------------------------------------------------------------------------
How to use the model in view of Django
In this section, we will learn how to access and use the model in view of a Django application.

Now, as discussed in the previous section, the first step is to import the required model into the view. For this, simply use the import statement. By importing the model, we can easily access the model in the view.

from app.models import ModelName
Now the usability of the model in a view totally depends upon the requirement. If we want to insert records in the table then, we have to create an object and insert it using the save() method.

Another requirement can be accessing the model data and then using it for some operation. For this implementation, consider the following code.

ModelName.objects.all()
Employeesemp.save()
-------------------------------------------------------------------
Let’s take an example where we will create a view named ‘index’ and this view retrieves all the employees from the database as objects.

To create a view open the views.py file of your Django app ‘myApp’. Then the below code will fetch all the records in the model and can easily iterate through this to get records.

from django.http import HttpResponse
from testapp.models import Employees


def index(request):
    emp_list = Employees.objects.all().count()
    return HttpResponse(emp_list)

-------------------------------------------------------------------------------------------------------
 we simply created an index view that will return the total count of the records available in the Employees model.
-----------------------
urls.py
------------------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('data/',views.index),
]
---------------------------------------------------------------------------------------
create your css files in static folder
<link rel="stylesheet" href="{% static 'css/c1.css' %}" >
for external css
--------------------------------------------------------------------
example-7
-------------------
<form method="post">
        {% csrf_token %}
        {{ form.as_p }}
<button type="submit">Submit</button>
----------------------------------------------------------------------------------------------------
The code snippet you provided is an HTML form written in Django, a web framework for building web applications in Python. The form is using a POST request method (method="post") to send data from the client (browser) to the server. Here are the elements of the code:

<form method="post">: This is the opening tag for a form element. The method attribute is set to "post", which means that when the form is submitted, the data will be sent to the server using the POST method. This is a secure method of transmitting data, as it does not expose the data in the URL.

{% csrf_token %}: This is a Django template tag that inserts a CSRF (Cross-Site Request Forgery) token into the form. CSRF tokens are used to prevent CSRF attacks by ensuring that the form submission originates from the same user who loaded the page. 

The server validates this token upon form submission.
{{ form.as_p }}: This is another Django template tag that renders the form fields as paragraphs (<p> tags). form refers to a form object that has been passed to the template context, and as_p is a method of the form object that outputs the form fields in HTML paragraph elements.

<button type="submit">Submit</button>: This is a button element of type submit that, when clicked, will submit the form data to the server. The button is labeled with the text "Submit."

In summary, the form uses Django's template tags to include a CSRF token and render the form fields, and it includes a submit button to allow the user to submit the form data using a POST request.
-------------------------------------------------------------------------------
create a templates :-
Register.html
--------------------------
<!DOCTYPE html>
<html lang="en">
<head>
       <title>Registration Form</title>
</head>
<style>
    body{background-color:yellow;}
    h1{background-color:red;color:yellow;}
    p{background-color:yellow;color:red;}
</style>
    
<body bgcolor=yellow>
    
    <h1>Employee Registration Form</h1><hr>
    <p>Please fill out the form below:</p>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
    <button type="submit">Submit</button>
    </form>
      
</body>
</html>

-----------------------------------------------------
success.html
------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Form Submission Successful</title>
</head>
<style>
    body{background-color:yellow;}
    h1{background-color:red;color:yellow;}
    p{background-color:yellow;color:red;}
</style>
<body>
    <h1>Form Submitted Successfully</h1>
    <p>Thank you for submitting the form. Your information has been received.</p>
    
</body>
</html>
--------------------------------------------------------------------------------
urls.py
--------------
from django.contrib import admin
from django.urls import path
from testapp import views
from testapp.views import submit_form



urlpatterns = [
    path('admin/', admin.site.urls),
    path('submit/', submit_form, name='submit_form'),
    path('submit/success.html/',views.success),
    path('data/',views.index),

]
---------------------------------------------------------------------
models.py
------------------
from django.db import models

# Create your models here.
class UserInfo1(models.Model):
    name=models.CharField(max_length=200)
    age=models.IntegerField()
    mail=models.EmailField()
    address=models.CharField(max_length=200)
    phoneno=models.IntegerField()
----------------------------------------------------------------------------------------
views.py
-------------------
from django.shortcuts import render,redirect
from django.http import HttpResponse
from .forms import UserInfoForm1
from django.urls import reverse
from testapp.models import UserInfo1

# views.py

def success(request):
    return render(request,'success.html')


def submit_form(request):
    if request.method == 'POST':
        form = UserInfoForm1(request.POST)
        if form.is_valid():
            form.save()
            return redirect('success.html')
# Redirect to a success page
    else:
        form = UserInfoForm1()
    return render(request, 'register.html', {'form': form})



def index(request):
    emp_list = UserInfo1.objects.all().count()
    return HttpResponse(emp_list)
------------------------------------------------------------------------------------------------------------------------
forms.py
-------------------------
from django import forms
from .models import UserInfo1

class UserInfoForm1(forms.ModelForm):
    class Meta:
        model = UserInfo1
        fields = ['name', 'age','mail', 'address','phoneno']
----------------------------------------------------------------------------------------
